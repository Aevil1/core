#define NO_UEFI

#include "gtest/gtest.h"

// current optimized implementation
#include "../src/score.h"

// reference implementation
namespace ref_impl {
#include "score_reference.h"
}

#include "uc32.h"


bool test_score(const unsigned long long processorNumber, unsigned char* publicKey, unsigned char* nonce)
{
    unsigned int current = score(processorNumber, publicKey, nonce);
    unsigned int reference = ref_impl::score(processorNumber, publicKey, nonce);
    std::cout << "current score() returns " << current << ", reference score() returns " << reference << std::endl;
    return current == reference;
}


TEST(TestQubicScoreFunction, ValidFixedInputOutputPairs) {
#if USE_SCORE_CACHE
    initEmptyScoreCache();
#endif
    EXPECT_TRUE(test_score(250, UC32x(8320711378477050309ULL, 248251795722472794ULL, 7094584288671124888ULL, 14227443369010736271ULL).uc32x, UC32x(5716962451283696375ULL, 15438913665440563544ULL, 5660271417447366021ULL, 1449305955311789203ULL).uc32x));
    EXPECT_TRUE(test_score(76, UC32x(6015686698731382584ULL, 17693382922901793301ULL, 5303467829488852063ULL, 5536581860782508177ULL).uc32x, UC32x(14651129848458773837ULL, 16606782960251081014ULL, 4824316377441174482ULL, 3112397658988141833ULL).uc32x));
    EXPECT_TRUE(test_score(836, UC32x(8819055211791392223ULL, 3612344957800964343ULL, 1616111278302647729ULL, 12291118741461627018ULL).uc32x, UC32x(5867722639434795907ULL, 17375317486170178940ULL, 18387574397302113102ULL, 9961112317218108906ULL).uc32x));
    EXPECT_TRUE(test_score(949, UC32x(3740010853302435321ULL, 11266677711290499638ULL, 6513295658310774369ULL, 15399782464434570122ULL).uc32x, UC32x(6941240860102303002ULL, 227594860492777111ULL, 18372348483042259765ULL, 12780778386658597109ULL).uc32x));
    EXPECT_TRUE(test_score(530, UC32x(7810734274729939137ULL, 15112447306033184324ULL, 10032622121553863387ULL, 13373831249435042196ULL).uc32x, UC32x(700835417149071305ULL, 14041796352912169829ULL, 17241713312634323814ULL, 6501703188642931345ULL).uc32x));
    EXPECT_TRUE(test_score(171, UC32x(6881693068054561446ULL, 8198193001912881382ULL, 8163393271466223361ULL, 8034056475698829591ULL).uc32x, UC32x(650169868309319616ULL, 1823305317569880788ULL, 7570330312056244878ULL, 8447310366263252888ULL).uc32x));
    EXPECT_TRUE(test_score(460, UC32x(9935290575929513068ULL, 3361334582520659635ULL, 18155488379260412692ULL, 4478717486148509604ULL).uc32x, UC32x(3750433195679230041ULL, 2516972679359509920ULL, 16735967429906322932ULL, 14551154992642235887ULL).uc32x));
    EXPECT_TRUE(test_score(882, UC32x(4313385617050085526ULL, 4738891533386970273ULL, 3513109154786599585ULL, 7945128467931244511ULL).uc32x, UC32x(3453524507424301765ULL, 10932906502554513623ULL, 41719851520346144ULL, 14030742550589866331ULL).uc32x));
    EXPECT_TRUE(test_score(350, UC32x(5063643796228753393ULL, 331912174799411468ULL, 14574381799323593931ULL, 17083611716540179373ULL).uc32x, UC32x(15316155741777348904ULL, 7825717298620594378ULL, 7951094136069142064ULL, 4770425742020355364ULL).uc32x));
    EXPECT_TRUE(test_score(755, UC32x(16389646495862008616ULL, 13893830711919112707ULL, 1131260305373423775ULL, 9121041763512903564ULL).uc32x, UC32x(15299538529594252043ULL, 13602960729522503533ULL, 3673523746285887157ULL, 5364900307275415015ULL).uc32x));
    EXPECT_TRUE(test_score(314, UC32x(15913335766282960142ULL, 12384689933754864034ULL, 18095014241744928810ULL, 7526449114250040880ULL).uc32x, UC32x(5933023302009888929ULL, 17142321738063909494ULL, 6002289459746442539ULL, 5080097501472233013ULL).uc32x));
    EXPECT_TRUE(test_score(975, UC32x(10781904601693064024ULL, 5213147055142167032ULL, 14622816232426232556ULL, 1695451401714056683ULL).uc32x, UC32x(7320907976003247452ULL, 8824006621344223264ULL, 4763823577360622280ULL, 17710302295718056691ULL).uc32x));
}
